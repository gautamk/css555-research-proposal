
@article{kaur_statistical_2013,
	title = {Statistical Comparison of Modelling Methods for Software Maintainability Prediction},
	volume = {23},
	issn = {02181940},
	url = {http://offcampus.lib.washington.edu/login?url=http://search.ebscohost.com/login.aspx?direct=true&db=bth&AN=91672707&site=ehost-live},
	doi = {10.1142/S0218194013500198},
	abstract = {The objective of this paper is statistical comparison of modelling methods for software maintainability prediction. The statistical comparison is performed by building software maintainability prediction models using 27 different regression and machine learning based algorithms. For this purpose, software metrics datasets of two different commercial object-oriented systems are used. These systems were developed using an object oriented programming language Ada. These systems are User Interface Management System ({UIMS}) and Quality Evaluation System ({QUES}). It is shown that different measures like {MMRE}, {RMSE}, Pred(0.25) and Pred(0.30) calculated on predicted values obtained from leave one out ({LOO}) cross validation produce very divergent results regarding accuracy of modelling methods. Therefore the 27 modelling methods are evaluated on the basis of statistical significance tests. The Friedman test is used to rank various modelling methods in terms of absolute residual error. Six out of the ten top ranked modelling methods are common to both {UIMS} and {QUES}. This indicates that modelling methods for software maintainability predicton are solid and scalable. After obtaining ranks, pair wise Wilcoxon Signed rank test is performed. Wilcoxon Sign rank test indicates that the top ranking method in {UIMS} data set is significantly superior to only four other modelling methods whereas the top tanking method in {QUES} data set is significantly superior to 11 other modelling methods. The performance of instance based learning algorithms - {IBk} and Kstar is comparable to modelling methods used in earlier studies.},
	pages = {743--774},
	number = {6},
	journaltitle = {International Journal of Software Engineering \& Knowledge Engineering},
	shortjournal = {International Journal of Software Engineering \& Knowledge Engineering},
	author = {Kaur, Arvinder and Kaur, Kamaldeep},
	urldate = {2016-01-17},
	date = {2013-08},
	keywords = {{ALGORITHMS}, {CORRELATION} (Statistics), {MACHINE} learning, machine learning, {MATHEMATICAL} models, {PREDICTION} models, {REGRESSION} analysis, significance tests, software maintainability prediction, software maintenance},
	file = {EBSCO Full Text:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/WDKX5STV/Kaur and Kaur - 2013 - Statistical Comparison of Modelling Methods for So.pdf:application/pdf}
}

@article{ahmed_machine_2013,
	title = {Machine learning approaches for predicting software maintainability: a fuzzy-based transparent model},
	volume = {7},
	issn = {1751-8806},
	doi = {10.1049/iet-sen.2013.0046},
	shorttitle = {Machine learning approaches for predicting software maintainability},
	abstract = {Software quality is one of the most important factors for assessing the global competitive position of any software company. Thus, the quantification of the quality parameters and integrating them into the quality models is very essential.Many attempts have been made to precisely quantify the software quality parameters using various models such as Boehm's Model, {McCall}'s Model and {ISO}/{IEC} 9126 Quality Model. A major challenge, although, is that effective quality models should consider two types of knowledge: imprecise linguistic knowledge from the experts and precise numerical knowledge from historical data.Incorporating the experts' knowledge poses a constraint on the quality model; the model has to be transparent.In this study, the authorspropose a process for developing fuzzy logic-based transparent quality prediction models.They applied the process to a case study where Mamdani fuzzy inference engine is used to predict software maintainability.Theycompared the Mamdani-based model with other machine learning approaches.The resultsshow that the Mamdani-based model is superior to all.},
	pages = {317--326},
	number = {6},
	journaltitle = {{IET} Software},
	author = {Ahmed, M.A. and Al-Jamimi, H.A.},
	date = {2013-12},
	keywords = {computational linguistics, {DP} industry, fuzzy logic, fuzzy logic-based transparent quality prediction model, fuzzy reasoning, imprecise linguistic knowledge, learning (artificial intelligence), machine learning approach, Mamdani-based model, Mamdani fuzzy inference engine, software company, software maintainability prediction, software maintenance, software quality, software quality parameter quantification},
	file = {IEEE Xplore Abstract Record:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/CZ8FD4VG/Ahmed and Al-Jamimi - 2013 - Machine learning approaches for predicting softwar.html:text/html;IEEE Xplore Full Text PDF:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/TUXNRD7Z/Ahmed and Al-Jamimi - 2013 - Machine learning approaches for predicting softwar.pdf:application/pdf}
}

@online{vlatko_dangers_2015,
	title = {The dangers of spaghetti code},
	url = {https://jaxenter.com/the-dangers-of-spaghetti-code-117807.html},
	abstract = {What can happen when spaghetti code is relied upon to operate mission-critical systems? We look at the Toyota spaghetti code debacle and how it could be the bad habits of programmers inheriting code at the heart of the problem.},
	titleaddon = {{JAXenter}},
	author = {Vlatko, Natali},
	urldate = {2016-01-17},
	date = {2015-06-05},
	file = {Snapshot:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/T53Q35AB/the-dangers-of-spaghetti-code-117807.html:text/html;Snapshot:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/WIFMVJGX/The dangers of spaghetti code.html:text/html}
}

@article{chen_empirical_2009,
	title = {An empirical analysis of the impact of software development problem factors on software maintainability},
	volume = {82},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121208002793},
	doi = {10.1016/j.jss.2008.12.036},
	abstract = {Many problem factors in the software development phase affect the maintainability of the delivered software systems. Therefore, understanding software development problem factors can help in not only reducing the incidence of project failure but can also ensure software maintainability. This study focuses on those software development problem factors which may possibly affect software maintainability. Twenty-five problem factors were classified into five dimensions; a questionnaire was designed and 137 software projects were surveyed. A K-means cluster analysis was performed to classify the projects into three groups of low, medium and high maintainability projects. For projects which had a higher level of severity of problem factors, the influence on software maintainability becomes more obvious. The influence of software process improvement ({SPI}) on project problems and the associated software maintainability was also examined in this study. Results suggest that {SPI} can help reduce the level of severity of the documentation quality and process management problems, and is only likely to enhance software maintainability to a medium level. Finally, the top 10 list of higher-severity software development problem factors was identified, and implications were discussed.},
	pages = {981--992},
	number = {6},
	journaltitle = {Journal of Systems and Software},
	shortjournal = {Journal of Systems and Software},
	author = {Chen, Jie-Cherng and Huang, Sun-Jen},
	urldate = {2016-01-17},
	date = {2009-06},
	keywords = {Software development problem factors, Software maintainability, Software process improvement},
	file = {ScienceDirect Full Text PDF:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/UBGXV6DK/Chen and Huang - 2009 - An empirical analysis of the impact of software de.pdf:application/pdf;ScienceDirect Full Text PDF:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/DJHZA8PX/Chen and Huang - 2009 - An empirical analysis of the impact of software de.pdf:application/pdf;ScienceDirect Snapshot:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/N9RWFMHX/Chen and Huang - 2009 - An empirical analysis of the impact of software de.html:text/html;ScienceDirect Snapshot:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/IRGIND2G/S0164121208002793.html:text/html}
}

@article{glass_frequently_2001,
	title = {Frequently forgotten fundamental facts about software engineering},
	volume = {18},
	issn = {0740-7459},
	doi = {10.1109/MS.2001.922739},
	abstract = {Not Available},
	pages = {112--111},
	number = {3},
	journaltitle = {{IEEE} Software},
	author = {Glass, R.L.},
	date = {2001-05},
	keywords = {Costs, Degradation, Ergonomics, Logic testing, Processor scheduling, Productivity, Programming profession, Software engineering, Software testing, Software tools},
	file = {IEEE Xplore Abstract Record:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/6FEBGUQ2/Glass - 2001 - Frequently forgotten fundamental facts about softw.html:text/html;IEEE Xplore Full Text PDF:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/PESWHPX8/Glass - 2001 - Frequently forgotten fundamental facts about softw.pdf:application/pdf}
}

@article{dehaghani_which_2013,
	title = {Which Factors Affect Software Projects Maintenance Cost More?},
	volume = {21},
	issn = {0353-8109},
	url = {http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3610582/},
	doi = {10.5455/AIM.2012.21.63-66},
	abstract = {Introduction
The software industry has had significant progress in recent years. The entire life of software includes two phases: production and maintenance. Software maintenance cost is increasingly growing and estimates showed that about 90\% of software life cost is related to its maintenance phase. Extraction and considering the factors affecting the software maintenance cost help to estimate the cost and reduce it by controlling the factors.

Methods
In this study, the factors affecting software maintenance cost were determined then were ranked based on their priority and after that effective ways to reduce the maintenance costs were presented. This paper is a research study. 15 software related to health care centers information systems in Isfahan University of Medical Sciences and hospitals function were studied in the years 2010 to 2011.

Results and discussion
Among Medical software maintenance team members, 40 were selected as sample. After interviews with experts in this field, factors affecting maintenance cost were determined. In order to prioritize the factors derived by {AHP}, at first, measurement criteria (factors found) were appointed by members of the maintenance team and eventually were prioritized with the help of {EC} software. Based on the results of this study, 32 factors were obtained which were classified in six groups. “Project” was ranked the most effective feature in maintenance cost with the highest priority. By taking into account some major elements like careful feasibility of {IT} projects, full documentation and accompany the designers in the maintenance phase good results can be achieved to reduce maintenance costs and increase longevity of the software.},
	pages = {63--66},
	number = {1},
	journaltitle = {Acta Informatica Medica},
	shortjournal = {Acta Inform Med},
	author = {Dehaghani, Sayed Mehdi Hejazi and Hajrahimi, Nafiseh},
	urldate = {2016-01-17},
	date = {2013-03},
	pmid = {23572866},
	pmcid = {PMC3610582},
	file = {PubMed Central Full Text PDF:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/5IUSEBZV/Dehaghani and Hajrahimi - 2013 - Which Factors Affect Software Projects Maintenance.pdf:application/pdf}
}

@article{zhang_analysis_2000,
	title = {An analysis of factors affecting software reliability},
	volume = {50},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121299000758},
	doi = {10.1016/S0164-1212(99)00075-8},
	abstract = {This paper presents the findings of empirical research from 13 companies participating in software development to identify the factors that may impact software reliability. Thirty-two potential factors involved in every stage of the software development process are defined. The study uses a survey instrument to analyze these factors and identify factors that have significant impact on software reliability. The survey focuses on the perspective of the primary participants, managers, system engineers, programmers, testers and other people involved in software research or development teams. Two techniques such as the relative weight method and analysis of variance technique ({ANOVA}) have been used to analyze all factors and rank them in terms of their impact on software reliability. The research findings have important implications for further research and the practice of software development. For researchers, it points to improvement schemes of existing reliability modeling and factors that may be further verified and extended in subsequent research. For practitioners, it provides a general guide to the important aspects to consider in the whole software development process.},
	pages = {43--56},
	number = {1},
	journaltitle = {Journal of Systems and Software},
	shortjournal = {Journal of Systems and Software},
	author = {Zhang, Xuemei and Pham, Hoang},
	urldate = {2016-01-17},
	date = {2000-01},
	keywords = {Analysis of variance ({ANOVA}), Correlation analysis, Software reliability},
	file = {ScienceDirect Full Text PDF:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/WWTJ7BAE/Zhang and Pham - 2000 - An analysis of factors affecting software reliabil.pdf:application/pdf;ScienceDirect Snapshot:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/J4Q6CTM6/S0164121299000758.html:text/html}
}